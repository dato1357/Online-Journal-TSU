using Cis.Shared.CommandModels;
using Cis.Shared.Models;
using Cis.Shared.Utils;
using Cis.Core.Domain.Events.ObjectEvents.ObjectStatusChanged;

namespace Cis.Core.Domain.Models.Cases
{
    public abstract class AggregateRoot : Entity
    {
        public List<DomainEvent> Changes { get; private set; }


        public int Version { get; protected set; }

        public AggregateRoot()
        {
            Changes = new List<DomainEvent>();
        }

        public abstract void Apply(DomainEvent changes);
        }
}



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace IERG.Domain
{
    public abstract class AggregateRoot : Entity
    {
        private readonly List<IDomainEvent> domainEvents = new List<IDomainEvent>();
        public virtual IReadOnlyList<IDomainEvent> DomainEvents => domainEvents;

        protected virtual void AddDomainEvent(IDomainEvent newEvent)
        {
            domainEvents.Add(newEvent);
        }

        public virtual void ClearEvents()
        {
            domainEvents.Clear();
        }
    }
}


public class PayAsYouGoAccount : EventSourcedAggregate
{
private FreeCallAllowance _freeCallAllowance;
private Money _credit;
private PayAsYouGoInclusiveMinutesOffer _inclusiveMinutesOffer = new PayAsYouGoInclusiveMinutesOffer();
public PayAsYouGoAccount(){

}
    public void TopUp(Money credit, IClock clock)
    {
    if (_InclusiveMinutesOffer.IsSatisfiedBy(credit))
    Causes(new CreditSatisfiesFreeCallAllowanceOffer(
    this.Id, clock.Time(), _inclusiveMinutesOffer.FreeMinutes)
    );
    Causes(new CreditAdded(this.Id, credit));
    }
    
    private void Causes(DomainEvent @event)
    {
    Changes.Add(@event);
    Apply(@event);
    }
}